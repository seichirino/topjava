Index: src/main/java/ru/javawebinar/topjava/repository/inmemory/InMemoryBaseRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/inmemory/InMemoryBaseRepositoryImpl.java	(date 1550613187385)
+++ src/main/java/ru/javawebinar/topjava/repository/inmemory/InMemoryBaseRepositoryImpl.java	(date 1550613187385)
@@ -0,0 +1,38 @@
+package ru.javawebinar.topjava.repository.inmemory;
+
+import org.springframework.stereotype.Repository;
+import ru.javawebinar.topjava.model.AbstractBaseEntity;
+
+import java.util.Collection;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.atomic.AtomicInteger;
+
+@Repository
+public class InMemoryBaseRepositoryImpl<T extends AbstractBaseEntity> {
+
+    private static AtomicInteger counter = new AtomicInteger(0);
+
+    private Map<Integer, T> entryMap = new ConcurrentHashMap<>();
+
+    public T save(T entry) {
+        if (entry.isNew()) {
+            entry.setId(counter.incrementAndGet());
+            entryMap.put(entry.getId(), entry);
+            return entry;
+        }
+        return entryMap.computeIfPresent(entry.getId(), (id, oldT) -> entry);
+    }
+
+    public boolean delete(int id) {
+        return entryMap.remove(id) != null;
+    }
+
+    public T get(int id) {
+        return entryMap.get(id);
+    }
+
+    Collection<T> getCollection() {
+        return entryMap.values();
+    }
+}
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/util/MealsUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/util/MealsUtil.java	(date 1550596002000)
+++ src/main/java/ru/javawebinar/topjava/util/MealsUtil.java	(date 1550606173639)
@@ -1,7 +1,8 @@
 package ru.javawebinar.topjava.util;
 
+import org.springframework.lang.Nullable;
 import ru.javawebinar.topjava.model.Meal;
-import ru.javawebinar.topjava.model.MealTo;
+import ru.javawebinar.topjava.to.MealTo;
 
 import java.time.LocalDate;
 import java.time.LocalDateTime;
@@ -32,7 +33,7 @@
         return getFilteredWithExcess(meals, caloriesPerDay, meal -> true);
     }
 
-    public static List<MealTo> getFilteredWithExcess(Collection<Meal> meals, int caloriesPerDay, LocalTime startTime, LocalTime endTime) {
+    public static List<MealTo> getFilteredWithExcess(Collection<Meal> meals, int caloriesPerDay, @Nullable LocalTime startTime, @Nullable LocalTime endTime) {
         return getFilteredWithExcess(meals, caloriesPerDay, meal -> Util.isBetween(meal.getTime(), startTime, endTime));
     }
 
Index: src/main/java/ru/javawebinar/topjava/util/DateTimeUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/util/DateTimeUtil.java	(date 1550596002000)
+++ src/main/java/ru/javawebinar/topjava/util/DateTimeUtil.java	(date 1550614242821)
@@ -1,11 +1,29 @@
 package ru.javawebinar.topjava.util;
 
+import java.time.LocalDate;
 import java.time.LocalDateTime;
+import java.time.LocalTime;
 import java.time.format.DateTimeFormatter;
 
 public class DateTimeUtil {
     private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
 
+    // DataBase doesn't support LocalDate.MIN/MAX
+    private static final LocalDate MIN_DATE = LocalDate.of(1, 1, 1);
+    private static final LocalDate MAX_DATE = LocalDate.of(3000, 1, 1);
+
+    public static LocalDateTime adjustStartDateTime(LocalDate localDate) {
+        return adjustDateTime(localDate, MIN_DATE, LocalTime.MIN);
+    }
+
+    public static LocalDateTime adjustEndDateTime(LocalDate localDate) {
+        return adjustDateTime(localDate, MAX_DATE, LocalTime.MAX);
+    }
+
+    private static LocalDateTime adjustDateTime(LocalDate localDate, LocalDate defaultDate, LocalTime adjustTime) {
+        return LocalDateTime.of(localDate != null ? localDate : defaultDate, adjustTime);
+    }
+
     public static String toString(LocalDateTime ldt) {
         return ldt == null ? "" : ldt.format(DATE_TIME_FORMATTER);
     }
Index: src/main/java/ru/javawebinar/topjava/service/MealService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/service/MealService.java	(date 1550596002000)
+++ src/main/java/ru/javawebinar/topjava/service/MealService.java	(date 1550615019230)
@@ -1,4 +1,30 @@
 package ru.javawebinar.topjava.service;
 
+import org.springframework.lang.Nullable;
+import ru.javawebinar.topjava.model.Meal;
+import ru.javawebinar.topjava.util.exception.NotFoundException;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.util.List;
+
+import static ru.javawebinar.topjava.util.DateTimeUtil.adjustEndDateTime;
+import static ru.javawebinar.topjava.util.DateTimeUtil.adjustStartDateTime;
+
 public interface MealService {
+    Meal get(int id, int userId) throws NotFoundException;
+
+    void delete(int id, int userId) throws NotFoundException;
+
+    default List<Meal> getBetweenDates(@Nullable LocalDate startDate, @Nullable LocalDate endDate, int userId) {
+        return getBetweenDateTimes(adjustStartDateTime(startDate), adjustEndDateTime(endDate), userId);
+    }
+
+    List<Meal> getBetweenDateTimes(LocalDateTime startDateTime, LocalDateTime endDateTime, int userId);
+
+    List<Meal> getAll(int userId);
+
+    void update(Meal meal, int userId) throws NotFoundException;
+
+    Meal create(Meal meal, int userId);
 }
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/service/MealServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/service/MealServiceImpl.java	(date 1550596002000)
+++ src/main/java/ru/javawebinar/topjava/service/MealServiceImpl.java	(date 1550596065058)
@@ -1,9 +1,52 @@
 package ru.javawebinar.topjava.service;
 
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+import ru.javawebinar.topjava.model.Meal;
 import ru.javawebinar.topjava.repository.MealRepository;
 
+import java.time.LocalDateTime;
+import java.util.List;
+
+import static ru.javawebinar.topjava.util.ValidationUtil.checkNotFoundWithId;
+
+@Service
 public class MealServiceImpl implements MealService {
 
-    private MealRepository repository;
+    private final MealRepository repository;
+
+    @Autowired
+    public MealServiceImpl(MealRepository repository) {
+        this.repository = repository;
+    }
+
+    @Override
+    public Meal get(int id, int userId) {
+        return checkNotFoundWithId(repository.get(id, userId), id);
+    }
+
+    @Override
+    public void delete(int id, int userId) {
+        checkNotFoundWithId(repository.delete(id, userId), id);
+    }
+
+    @Override
+    public List<Meal> getBetweenDateTimes(LocalDateTime startDateTime, LocalDateTime endDateTime, int userId) {
+        return repository.getBetween(startDateTime, endDateTime, userId);
+    }
 
+    @Override
+    public List<Meal> getAll(int userId) {
+        return repository.getAll(userId);
+    }
+
+    @Override
+    public void update(Meal meal, int userId) {
+        checkNotFoundWithId(repository.save(meal, userId), meal.getId());
+    }
+
+    @Override
+    public Meal create(Meal meal, int userId) {
+        return repository.save(meal, userId);
+    }
 }
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/model/Meal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/model/Meal.java	(date 1550596002000)
+++ src/main/java/ru/javawebinar/topjava/model/Meal.java	(date 1550596044934)
@@ -4,9 +4,7 @@
 import java.time.LocalDateTime;
 import java.time.LocalTime;
 
-public class Meal {
-    private Integer id;
-
+public class Meal extends AbstractBaseEntity {
     private final LocalDateTime dateTime;
 
     private final String description;
@@ -18,20 +16,12 @@
     }
 
     public Meal(Integer id, LocalDateTime dateTime, String description, int calories) {
-        this.id = id;
+        super(id);
         this.dateTime = dateTime;
         this.description = description;
         this.calories = calories;
     }
 
-    public Integer getId() {
-        return id;
-    }
-
-    public void setId(Integer id) {
-        this.id = id;
-    }
-
     public LocalDateTime getDateTime() {
         return dateTime;
     }
@@ -52,10 +42,6 @@
         return dateTime.toLocalTime();
     }
 
-    public boolean isNew() {
-        return id == null;
-    }
-
     @Override
     public String toString() {
         return "Meal{" +
Index: src/main/java/ru/javawebinar/topjava/model/MealTo.java
===================================================================
--- src/main/java/ru/javawebinar/topjava/model/MealTo.java	(date 1550596002000)
+++ src/main/java/ru/javawebinar/topjava/to/MealTo.java	(date 1550596065064)
@@ -1,4 +1,4 @@
-package ru.javawebinar.topjava.model;
+package ru.javawebinar.topjava.to;
 
 import java.time.LocalDateTime;
 
Index: src/main/webapp/meals.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/webapp/meals.jsp	(date 1550596002000)
+++ src/main/webapp/meals.jsp	(date 1550596065144)
@@ -33,7 +33,7 @@
         </tr>
         </thead>
         <c:forEach items="${meals}" var="meal">
-            <jsp:useBean id="meal" scope="page" type="ru.javawebinar.topjava.model.MealTo"/>
+            <jsp:useBean id="meal" scope="page" type="ru.javawebinar.topjava.to.MealTo"/>
             <tr class="${meal.excess ? 'excess' : 'normal'}">
                 <td>
                         <%--${meal.dateTime.toLocalDate()} ${meal.dateTime.toLocalTime()}--%>
Index: src/main/java/ru/javawebinar/topjava/web/meal/MealRestController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/meal/MealRestController.java	(date 1550596002000)
+++ src/main/java/ru/javawebinar/topjava/web/meal/MealRestController.java	(date 1550613729852)
@@ -1,8 +1,76 @@
 package ru.javawebinar.topjava.web.meal;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Controller;
+import ru.javawebinar.topjava.model.Meal;
 import ru.javawebinar.topjava.service.MealService;
+import ru.javawebinar.topjava.to.MealTo;
+import ru.javawebinar.topjava.util.MealsUtil;
+import ru.javawebinar.topjava.web.SecurityUtil;
+
+import java.time.LocalDate;
+import java.time.LocalTime;
+import java.util.List;
 
+import static ru.javawebinar.topjava.util.ValidationUtil.assureIdConsistent;
+import static ru.javawebinar.topjava.util.ValidationUtil.checkNew;
+
+@Controller
 public class MealRestController {
-    private MealService service;
+    private static final Logger log = LoggerFactory.getLogger(MealRestController.class);
+
+    private final MealService service;
+
+    @Autowired
+    public MealRestController(MealService service) {
+        this.service = service;
+    }
+
+    public Meal get(int id) {
+        int userId = SecurityUtil.authUserId();
+        log.info("get meal {} for user {}", id, userId);
+        return service.get(id, userId);
+    }
+
+    public void delete(int id) {
+        int userId = SecurityUtil.authUserId();
+        log.info("delete meal {} for user {}", id, userId);
+        service.delete(id, userId);
+    }
+
+    public List<MealTo> getAll() {
+        int userId = SecurityUtil.authUserId();
+        log.info("getAll for user {}", userId);
+        return MealsUtil.getWithExcess(service.getAll(userId), SecurityUtil.authUserCaloriesPerDay());
+    }
+
+    public Meal create(Meal meal) {
+        int userId = SecurityUtil.authUserId();
+        checkNew(meal);
+        log.info("create {} for user {}", meal, userId);
+        return service.create(meal, userId);
+    }
+
+    public void update(Meal meal, int id) {
+        int userId = SecurityUtil.authUserId();
+        assureIdConsistent(meal, id);
+        log.info("update {} for user {}", meal, userId);
+        service.update(meal, userId);
+    }
 
+    /**
+     * <ol>Filter separately
+     * <li>by date</li>
+     * <li>by time for every date</li>
+     * </ol>
+     */
+    public List<MealTo> getBetween(LocalDate startDate, LocalTime startTime, LocalDate endDate, LocalTime endTime) {
+        int userId = SecurityUtil.authUserId();
+        log.info("getBetween dates({} - {}) time({} - {}) for user {}", startDate, endDate, startTime, endTime, userId);
+
+        List<Meal> mealsDateFiltered = service.getBetweenDates(startDate, endDate, userId);
+        return MealsUtil.getFilteredWithExcess(mealsDateFiltered, SecurityUtil.authUserCaloriesPerDay(), startTime, endTime);
+    }
 }
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/SpringMain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/SpringMain.java	(date 1550596002000)
+++ src/main/java/ru/javawebinar/topjava/SpringMain.java	(date 1550596065138)
@@ -4,9 +4,15 @@
 import org.springframework.context.support.ClassPathXmlApplicationContext;
 import ru.javawebinar.topjava.model.Role;
 import ru.javawebinar.topjava.model.User;
+import ru.javawebinar.topjava.to.MealTo;
+import ru.javawebinar.topjava.web.meal.MealRestController;
 import ru.javawebinar.topjava.web.user.AdminRestController;
 
+import java.time.LocalDate;
+import java.time.LocalTime;
+import java.time.Month;
 import java.util.Arrays;
+import java.util.List;
 
 public class SpringMain {
     public static void main(String[] args) {
@@ -15,6 +21,14 @@
             System.out.println("Bean definition names: " + Arrays.toString(appCtx.getBeanDefinitionNames()));
             AdminRestController adminUserController = appCtx.getBean(AdminRestController.class);
             adminUserController.create(new User(null, "userName", "email@mail.ru", "password", Role.ROLE_ADMIN));
+            System.out.println();
+
+            MealRestController mealController = appCtx.getBean(MealRestController.class);
+            List<MealTo> filteredMealsWithExcess =
+                    mealController.getBetween(
+                            LocalDate.of(2015, Month.MAY, 30), LocalTime.of(7, 0),
+                            LocalDate.of(2015, Month.MAY, 31), LocalTime.of(11, 0));
+            filteredMealsWithExcess.forEach(System.out::println);
         }
     }
 }
Index: src/main/java/ru/javawebinar/topjava/util/Util.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/util/Util.java	(date 1550596002000)
+++ src/main/java/ru/javawebinar/topjava/util/Util.java	(date 1550606173625)
@@ -1,7 +1,9 @@
 package ru.javawebinar.topjava.util;
 
+import org.springframework.lang.Nullable;
+
 public class Util {
-    public static <T extends Comparable<? super T>> boolean isBetween(T value, T start, T end) {
-        return value.compareTo(start) >= 0 && value.compareTo(end) <= 0;
+    public static <T extends Comparable<? super T>> boolean isBetween(T value, @Nullable T start, @Nullable T end) {
+        return (start == null || value.compareTo(start) >= 0) && (end == null || value.compareTo(end) <= 0);
     }
 }
Index: src/main/java/ru/javawebinar/topjava/repository/inmemory/InMemoryMealRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/inmemory/InMemoryMealRepositoryImpl.java	(date 1550596002000)
+++ src/main/java/ru/javawebinar/topjava/repository/inmemory/InMemoryMealRepositoryImpl.java	(date 1550605316890)
@@ -1,6 +1,6 @@
 package ru.javawebinar.topjava.repository.inmemory;
 
-import org.springframework.util.CollectionUtils;
+import org.springframework.stereotype.Repository;
 import ru.javawebinar.topjava.model.Meal;
 import ru.javawebinar.topjava.repository.MealRepository;
 import ru.javawebinar.topjava.util.MealsUtil;
@@ -13,18 +13,17 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
 
 import static ru.javawebinar.topjava.repository.inmemory.InMemoryUserRepositoryImpl.ADMIN_ID;
 import static ru.javawebinar.topjava.repository.inmemory.InMemoryUserRepositoryImpl.USER_ID;
 
+@Repository
 public class InMemoryMealRepositoryImpl implements MealRepository {
 
     // Map  userId -> (mealId-> meal)
-    private Map<Integer, Map<Integer, Meal>> usersMealsMap = new ConcurrentHashMap<>();
-    private AtomicInteger counter = new AtomicInteger(0);
+    private Map<Integer, InMemoryBaseRepositoryImpl<Meal>> usersMealsMap = new ConcurrentHashMap<>();
 
     {
         MealsUtil.MEALS.forEach(meal -> save(meal, USER_ID));
@@ -36,24 +35,19 @@
 
     @Override
     public Meal save(Meal meal, int userId) {
-        Map<Integer, Meal> meals = usersMealsMap.computeIfAbsent(userId, ConcurrentHashMap::new);
-        if (meal.isNew()) {
-            meal.setId(counter.incrementAndGet());
-            meals.put(meal.getId(), meal);
-            return meal;
-        }
-        return meals.computeIfPresent(meal.getId(), (id, oldMeal) -> meal);
+        InMemoryBaseRepositoryImpl<Meal> meals = usersMealsMap.computeIfAbsent(userId, uid -> new InMemoryBaseRepositoryImpl<>());
+        return meals.save(meal);
     }
 
     @Override
     public boolean delete(int id, int userId) {
-        Map<Integer, Meal> meals = usersMealsMap.get(userId);
-        return meals != null && meals.remove(id) != null;
+        InMemoryBaseRepositoryImpl<Meal> meals = usersMealsMap.get(userId);
+        return meals != null && meals.delete(id);
     }
 
     @Override
     public Meal get(int id, int userId) {
-        Map<Integer, Meal> meals = usersMealsMap.get(userId);
+        InMemoryBaseRepositoryImpl<Meal> meals = usersMealsMap.get(userId);
         return meals == null ? null : meals.get(id);
     }
 
@@ -68,9 +62,9 @@
     }
 
     private List<Meal> getAllFiltered(int userId, Predicate<Meal> filter) {
-        Map<Integer, Meal> meals = usersMealsMap.get(userId);
-        return CollectionUtils.isEmpty(meals) ? Collections.emptyList() :
-                meals.values().stream()
+        InMemoryBaseRepositoryImpl<Meal> meals = usersMealsMap.get(userId);
+        return meals == null ? Collections.emptyList() :
+                meals.getCollection().stream()
                         .filter(filter)
                         .sorted(Comparator.comparing(Meal::getDateTime).reversed())
                         .collect(Collectors.toList());
Index: src/main/java/ru/javawebinar/topjava/repository/inmemory/InMemoryUserRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/inmemory/InMemoryUserRepositoryImpl.java	(date 1550596002000)
+++ src/main/java/ru/javawebinar/topjava/repository/inmemory/InMemoryUserRepositoryImpl.java	(date 1550613729829)
@@ -6,50 +6,24 @@
 
 import java.util.Comparator;
 import java.util.List;
-import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.atomic.AtomicInteger;
 import java.util.stream.Collectors;
 
 @Repository
-public class InMemoryUserRepositoryImpl implements UserRepository {
-
-    public static final int USER_ID = 1;
-    public static final int ADMIN_ID = 2;
+public class InMemoryUserRepositoryImpl extends InMemoryBaseRepositoryImpl<User> implements UserRepository {
 
-    private Map<Integer, User> usersMap = new ConcurrentHashMap<>();
-    private AtomicInteger counter = new AtomicInteger(0);
-
-    @Override
-    public User save(User user) {
-        if (user.isNew()) {
-            user.setId(counter.incrementAndGet());
-            usersMap.put(user.getId(), user);
-            return user;
-        }
-        return usersMap.computeIfPresent(user.getId(), (id, oldUser) -> user);
-    }
-
-    @Override
-    public boolean delete(int id) {
-        return usersMap.remove(id) != null;
-    }
-
-    @Override
-    public User get(int id) {
-        return usersMap.get(id);
-    }
+    static final int USER_ID = 1;
+    static final int ADMIN_ID = 2;
 
     @Override
     public List<User> getAll() {
-        return usersMap.values().stream()
+        return getCollection().stream()
                 .sorted(Comparator.comparing(User::getName).thenComparing(User::getEmail))
                 .collect(Collectors.toList());
     }
 
     @Override
     public User getByEmail(String email) {
-        return usersMap.values().stream()
+        return getCollection().stream()
                 .filter(u -> email.equals(u.getEmail()))
                 .findFirst()
                 .orElse(null);
